# Generated by Django 5.0.7 on 2025-09-26 18:00

from django.db import migrations

# Lista de las descripciones de apreciaciones que se deben conservar
APRECIACIONES_A_CONSERVAR = [
    "ADMISIÓN.EDUCACIÓN BÁSICA.DOCENTE.EDUCACIÓN ESPECIAL.EDUCACIÓN ESPECIAL",
    "ADMISIÓN.EDUCACIÓN BÁSICA.DOCENTE.EDUCACIÓN ESPECIAL.PSICOLOGÍA EDUCATIVA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.DOCENTE.EDUCACIÓN FÍSICA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.ARTES GRÁFICAS",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.CARPINTERÍA E INDUSTRIA DE LA MADERA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.COCINA, PANADERÍA Y REPOSTERÍA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.COMPUTACIÓN E INFORMÁTICA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.DISEÑO DE MODAS E INDUSTRIA DEL VESTIDO",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.ELECTRICIDAD",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.ESTÉTICA Y SALUD CORPORAL",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.ESTRUCTURAS METÁLICAS Y SOLDADURA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.HORTICULTURA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.MANTENIMIENTO",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.MANUALIDADES",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.MECÁNICA",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.TERAPISTA FÍSICO",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN ESPECIAL.MAESTRO DE TALLER.TURISMO",
    "ADMISIÓN.EDUCACIÓN BÁSICA.TÉCNICO DOCENTE.EDUCACIÓN PRIMARIA.MAESTRO DE ENSEÑANZA ARTÍSTICA",
]

def eliminar_apreciaciones_no_deseadas(apps, schema_editor):
    """
    Elimina todas las instancias de TipoApreciacion cuya descripción no esté en
    la lista APRECIACIONES_A_CONSERVAR.
    """
    TipoApreciacion = apps.get_model('gestion_escolar', 'TipoApreciacion')
    # Excluir las que queremos conservar y eliminar el resto
    TipoApreciacion.objects.exclude(descripcion__in=APRECIACIONES_A_CONSERVAR).delete()

def revertir_eliminacion(apps, schema_editor):
    """
    Revierte la eliminación, reinsertando todas las apreciaciones originales.
    Esta función es un marcador de posición y debería ser implementada si se
    necesita una forma de revertir la migración. Por simplicidad, aquí se deja vacía,
    asumiendo que la migración 0006_populate_tipoapreciacion se puede volver a ejecutar
    si es necesario.
    """
    # Para revertir, necesitaríamos la lista completa de apreciaciones de la migración anterior.
    # Por ahora, esta operación no hace nada, lo que significa que la eliminación es irreversible
    # a través de 'migrate zero' a menos que se restaure la base de datos o se vuelva a
    # ejecutar la migración de población inicial.
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('gestion_escolar', '0011_vacancia_folio_prelacion_vacancia_posicion_orden'),
    ]

    operations = [
        migrations.RunPython(eliminar_apreciaciones_no_deseadas, reverse_code=revertir_eliminacion),
    ]
